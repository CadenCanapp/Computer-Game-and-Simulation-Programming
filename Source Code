-------------------------------
Actor.gd 
  extends KinematicBody2D
class_name Actor

const FLOOR_NORMAL: = Vector2.UP

export var speed: = Vector2(300.0, 1000.0)
export var gravity: = 4000.0

var _velocity: = Vector2.ZERO
----------------------------------
Coin.gd
extends Area2D

onready var anim_player: AnimationPlayer= get_node("AnimationPlayer")

export var score: = 100

func _on_body_entered(body: PhysicsBody2D) -> void:
	picked()
	
func picked() -> void:
	PlayerData.score += score
	anim_player.play("fade")
  ----------------------------------
  Enemy.gd
  extends "res://src/Actor/Actor.gd"

onready var stomp_area: Area2D = $StompArea2D

export var score: = 100

func _ready() -> void:
	set_physics_process(false)
	_velocity.x = -speed.x


func _on_Stomp_body_entered(body: PhysicsBody2D) -> void:
	die()
func _on_Stomp_area_entered(area: Area2D) -> void:
	die()

func _physics_process(delta: float) -> void:
	_velocity.y += gravity * delta
	if is_on_wall():
		_velocity.x *= -1.0
	_velocity.y = move_and_slide(_velocity, FLOOR_NORMAL).y
	if _velocity.x == 300:
		$enemy.flip_h = true
	elif _velocity.x == 80:
		$enemy.flip_h = true
	else:
		$enemy.flip_h = false
	
func die() -> void:
	PlayerData.score += score
	queue_free()
----------------------------------
Player.gd
extends Actor

export var stomp_impulse: = 1000.0


func _on_Detector_area_entered(area: Area2D) -> void:
	_velocity = calculate_stomp_velocity(_velocity, stomp_impulse)



func _on_Detector_body_entered(body: PhysicsBody2D) -> void:
	die()
	
	

func _physics_process(delta: float) -> void:
	var is_jump_interrupted: = Input.is_action_just_released("jump") and _velocity.y < 0.0
	var direction: = get_direction()
	_velocity = calculate_move_velocity(_velocity, direction, speed, is_jump_interrupted)
	_velocity = move_and_slide(_velocity, FLOOR_NORMAL)
	if Input.is_action_pressed("move_right"):
		$player.flip_h = false
		$player.play("run")
	elif Input.is_action_pressed("move_left"):
		$player.flip_h = true
		$player.play("run")
	else:
		$player.play("idle")
	if !is_on_floor():
		$player.play("jump")
		



func get_direction() -> Vector2:
	return Vector2(
		Input.get_action_strength("move_right") - Input.get_action_strength("move_left"),
		-1.0 if Input.is_action_just_pressed("jump") and is_on_floor() else 0.0
	)
	
	
	
func calculate_move_velocity(
		linear_velocity: Vector2,
		direction: Vector2,
		speed: Vector2,
		is_jump_interrupted: bool
	) -> Vector2:
		var out: = linear_velocity
		out.x = speed.x * direction.x
		out.y += gravity * get_physics_process_delta_time()
		if direction.y == -1.0:
			out.y = speed.y * direction.y
		if is_jump_interrupted:
			out.y = 0.0
		return out


func calculate_stomp_velocity(linear_velocity: Vector2, impulse: float) -> Vector2:
	var out: = linear_velocity
	out.y = -impulse
	return out

func die() -> void:
	
	PlayerData.deaths -= 1
	queue_free()
  -------------------------------
  PlayerData.gd
  extends Node
  
signal score_updated
signal player_died

var score: = 0 setget set_score
var deaths: = 3 setget set_deaths


func reset() -> void:
	score = 0
	deaths = 3
	
func set_score(value: int) -> void:
	score = value
	emit_signal("score_updated")


func set_deaths(value: int) -> void:
	deaths = value
	emit_signal("player_died")










	





